/*

实现 pow(x, n) ，即计算 x 的整数 n 次幂函数（即，xn ）。



示例 1：

输入：x = 2.00000, n = 10
输出：1024.00000
示例 2：

输入：x = 2.10000, n = 3
输出：9.26100
示例 3：

输入：x = 2.00000, n = -2
输出：0.25000
解释：2-2 = 1/22 = 1/4 = 0.25


提示：

-100.0 < x < 100.0
-231 <= n <= 231-1
n 是一个整数
要么 x 不为零，要么 n > 0 。
-104 <= xn <= 104

*/

/*

题意就是我们返回 n 个 x 相乘 的结果

但是实际上我们没有必要去循环

举个例子

x = 2, n = 4

我们只要求出 2*2 然后再求 2*2 的平方就是我们最后的结果了

所以我们可以

当 n >= 0
1. n 为 0  我们直接返回1
2. n 为 偶数, 我们先求 n / 2
3  n 为 奇数, 我们求 n * (n - 1)
当 n < 0
我们用 1 / pow(x, -n)

*/

export function myPow(x: number, n: number): number {
  if (n === 0) {
    return 1;
  }
  if (n % 2 === 1) {
    return x * myPow(x, n - 1);
  }
  if (n < 0) {
    return 1 / myPow(x, -n);
  }
  return myPow(x * x, n / 2);
}
